class Solution
{

    public static int val(int nums[],int i,int j,int m,int pre[],HashMap<String,Integer> map,int dp[][])
    {
        if(m<0)
        {
            return Integer.MAX_VALUE;
        }
        
        if(i>j)
         {
            if(m>0)
            {
                return Integer.MAX_VALUE;
            }
             return 0;
         }
        if(dp[i][m]!=-1)
        {
            return dp[i][m];
        }
        int min=Integer.MAX_VALUE;
        for(int k=i;k<=j;k++)
        {
            int left=sum(pre,i,k);
            int right=val(nums,k+1,j,m-1,pre,map,dp);
            int max=Math.max(left,right);
            min=Math.min(min,max);
        }
        dp[i][m]=min;
        return min;
    }
    public static int sum(int pre[],int i,int j)
    {
    
         if(i!=0)
         {
             return pre[j]-pre[i-1];
         }
        else
        {
           return pre[j];
        }
    }
    public int splitArray(int[] nums, int m) 
    {
        int n=nums.length;
        int pre[]=new int[n];
        pre[0]=nums[0];
        for(int i=1;i<n;i++)
        {
            pre[i]=pre[i-1]+nums[i];
        }
        int dp[][]=new int[n+1][m+1];
        for(int i=0;i<=n;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        HashMap<String,Integer> map=new   HashMap<String,Integer>();
        
       return val(nums,0,n-1,m,pre,map,dp);
        
        
    }
}
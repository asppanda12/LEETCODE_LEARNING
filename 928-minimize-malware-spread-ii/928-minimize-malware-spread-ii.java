class Solution 
{
   static class Pair
    {
        int x;
        int y;
        Pair(int x,int y)
        {
            this.x=x;
            this.y=y;
        }
    }
    public static Pair dfs(ArrayList<ArrayList<Integer>> adj,int src,int v[],HashSet<Integer> set)
    {
        if(adj.get(src).size()==1 && v[adj.get(src).get(0)]==1)
        {
            if(set.contains(src)==true)
            {
                Pair a=new Pair(1,1);
                return a;
            }
            
                Pair a=new Pair(0,1);
            return a;
        }
        v[src]=1;
        int val=0;int total=0;
        for(Integer a:adj.get(src))
        {
            if(v[a]==0)
            {
                Pair t=dfs(adj,a,v,set);
                if(set.contains(src))
                {
                val|=t.x|1;
                }
                else
                {
                val|=t.x;
                }
                total+=t.y;
            }
        }
      Pair a=new Pair(val,1+total);
        return a;
    }
    public static int dfs1(ArrayList<ArrayList<Integer>> arr,int v[],int src)
    {
        v[src]=1;
        int total=0;
        for(Integer ar:arr.get(src))
        {
            if(v[ar]==0)
            {
                total+=dfs1(arr,v,ar);
            }
        }
        return 1+total;
    }
    public static int minMalwareSpread(int[][] graph, int[] initial) 
    {
        ArrayList<ArrayList<Integer>> arr=new ArrayList<ArrayList<Integer>>();
        int n=graph.length;
        int m=graph[0].length;
        for(int i=0;i<n;i++)
        {
             arr.add(new ArrayList<Integer>());
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i!=j)
                {
                    if(graph[i][j]!=0)
                    arr.get(i).add(j);
                }
            }
        }
        HashSet<Integer> set=new HashSet<Integer>();
        for(int i=0;i<initial.length;i++)
        {
            set.add(initial[i]);
        }
        TreeMap<Integer,Integer> map=new TreeMap<Integer,Integer>();
        int v1[]=new int[n];
        int total1=0;
        for(int i=0;i<initial.length;i++)
        {
            if(v1[initial[i]]==0)
            {
                total1+=dfs1(arr,v1,initial[i]);
            }
        }
        int v[]=new int[n];
        for(int i=0;i<initial.length;i++)
        {
              Arrays.fill(v,0);
            int src=initial[i];int total=0;
            v[initial[i]]=1;int intotal=0;
          
            for(Integer a:arr.get(src))
            {
              if(v[a]==0)
              {
                Pair val=dfs(arr,a,v,set);
                if(val.x==1)
                total+=val.y;
                intotal+=val.y;
              }
            }
           map.put(initial[i],total1-(intotal+1)+total);
        }
       int min=Integer.MAX_VALUE;int ind=0;
        for(Map.Entry<Integer,Integer> m1:map.entrySet())
        {
            if(m1.getValue()<min)
            {
                min=m1.getValue();
                ind=m1.getKey();
            }
        }
        return ind;
    
    }
}